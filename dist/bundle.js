/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./js/index.js":
/*!*********************!*\
  !*** ./js/index.js ***!
  \*********************/
/***/ (() => {

eval("\r\n\r\n\r\nconst TYPE_URL = \"https://pokeapi.co/api/v2/type/\";\r\nlet backImage = \"\", frontImage =\"\", pokeId = 0, response;\r\n\r\n//  DOM Elements\r\nconst charName = document.getElementById(\"charName\");\r\nconst charHeight = document.getElementById(\"charHeight\");\r\nconst charWeight = document.getElementById(\"charWeight\");\r\nconst charTypes = document.getElementById(\"charTypes\");\r\nconst charImage = document.getElementById(\"charImage\");\r\n\r\nconst submitBtn = document.getElementById(\"submitBtn\");\r\nconst clearBtn = document.getElementById(\"clearBtn\");\r\nconst input = document.getElementById(\"input\");\r\n\r\n\r\nconst submitUserBtn = document.getElementById(\"submitUserBtn\");\r\nconst userInput = document.getElementById(\"userInput\");\r\n\r\nconst catchBtn = document.getElementById(\"catchBtn\");\r\nconst releaseBtn = document.getElementById(\"releaseBtn\");\r\n// use API\r\nconst getPokemonFromApi = async (inputtedName) => {\r\n    try {\r\n         response = await axios.get(`http://localhost:8080/pokemon/get/${inputtedName}/`, {\r\n            headers: {\r\n                'Access-Control-Allow-Origin': \"*\",\r\n                \"username\": `eithan`\r\n            }\r\n        });\r\n        pokeId = response.data.id;\r\n        console.log(response);\r\n        assignValues(response.data);\r\n    }\r\n    catch (error) {\r\n        alert(`Your search for ${inputtedName} has no matching results`)\r\n        console.error(error);\r\n    }\r\n}\r\n\r\nconst getPokeList = async (type) => {\r\n    try {\r\n        const res = await axios.get(`${TYPE_URL}${type}`, {\r\n            Headers: {\r\n                'Access-Control-Allow-Origin': \"*\",\r\n                'Access-Control-Allow-Headers': \"Content-Type\"\r\n            }\r\n        });\r\n        createDOMListSection(res.data.pokemon, type);\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n\r\n// extra Functions\r\nconst getInputtedValue = () => {\r\n    if(input.value === \"\") { \r\n      alert(\"PLease insert Some text\");\r\n      return;\r\n    }\r\n    getPokemonFromApi(input.value);\r\n}\r\n\r\nconst assignValues = (data) => {\r\n    clearValues();\r\ncharName.textContent += data.name;\r\ncharHeight.textContent += data.height;\r\ncharWeight.textContent += data.weight;\r\ncharTypes.innerHTML += getTypes(data.types).join(\", \");\r\n\r\nfrontImage = data.front_pic     // used for Image turn\r\ncharImage.src = frontImage;                 \r\nbackImage = data.back_pic;      // used for Image turn\r\n\r\n}\r\n\r\nconst getTypes = (typesArr) => {\r\n    return typesArr.map(cell => (`<button onclick=\"getPokeList('${cell}')\" class= \"pokeType\">${cell}</button>`));\r\n}\r\n\r\nconst clearValues = () => {\r\ncharName.textContent = \"Name: \";\r\ncharHeight.textContent = \"Height: \";\r\ncharWeight.textContent = \"Weight: \";\r\ncharTypes.textContent = \"Types: \";\r\n}\r\n\r\nconst createDOMListSection = (pokeArr, type) => {\r\n    closeSection();\r\n    const typesSection = document.createElement(\"section\");\r\n    typesSection.append(createSearchInput(type));\r\n    typesSection.append(createCloseBtn())\r\n    typesSection.append(createDOMList(pokeArr));\r\n    typesSection.setAttribute(\"id\", \"typesSection\")\r\n    document.body.appendChild(typesSection);\r\n}\r\n\r\nconst createDOMList = (pokeArr) => {\r\n    const list = createElement(\"ul\",\"\", [], {id: \"pokeList\"})\r\n    for (let i = 0; i < pokeArr.length; i++) {\r\n        const pokeListButton = createElement(\"button\", pokeArr[i].pokemon.name,  [\"pokeType\"], {onclick: `getPokemonFromApi('${pokeArr[i].pokemon.name}')`})\r\n        const pokeListLi = document.createElement(\"li\");\r\n        pokeListLi.appendChild(pokeListButton)\r\n        list.appendChild(pokeListLi);\r\n    }\r\n   return list;\r\n}\r\n\r\nconst createSearchInput = (type) => {\r\n  return createElement(\"input\", \"\", [],\r\n   {type: \"text\",\r\n    placeholder: `Search ${type} type Pokemons`,\r\n    onkeyup: \"filterList(this.value)\",\r\n    id: \"search\"})\r\n}\r\n\r\nconst filterList = (inputValue) => {\r\n    const searchValue = inputValue.toLowerCase();   // gets the value in lower case\r\n\r\n    for ( let pokeElement of document.getElementById(\"pokeList\").children) {    // gets all tasks on the page\r\n        if(pokeElement.innerText.toLowerCase().includes(searchValue)) {\r\n            pokeElement.style.display = \"list-item\";\r\n           }\r\n           else{\r\n            pokeElement.style.display = \"none\";                     // hides them\r\n           }\r\n    }\r\n          \r\n}\r\n\r\nconst createCloseBtn = () => {\r\n    const closeBtn = createElement(\"button\", \"âœ˜\", [\"closeBtn\"], {onclick: \"closeSection()\"});\r\n    return closeBtn;\r\n}\r\n\r\nconst closeSection = () =>  {\r\n    try{\r\n    document.getElementById(\"typesSection\").remove();\r\n    } catch {\r\n        return;\r\n    }\r\n}\r\n\r\nconst createElement = (tagName, text=\" \", classes = [], attributes = {}) => {\r\n    const element = document.createElement(tagName);\r\n    \r\n    // assigning text\r\n      element.textContent = text;\r\n    \r\n    // For Classes\r\n    for(const cls of classes) {\r\n      element.classList.add(cls);\r\n    }\r\n  \r\n    // For Attributes\r\n    for (const attr in attributes) {\r\n      element.setAttribute(attr, attributes[attr]);\r\n    }\r\n    return element;\r\n  }\r\n\r\n\r\nconst catchPokemon = async () => {\r\n    try {\r\n        await axios.put(`http://localhost:8080/pokemon/catch/${response.id}/`, {\r\n            pokeObj: response\r\n         });\r\n         alert(\"The Pokemon Caught Successfuly\")\r\n    }\r\n    catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n\r\nconst releasePokemon = async () => {\r\n    try {\r\n        await axios.delete(`http://localhost:8080/pokemon/catch/${response.id}/`);\r\n         alert(\"The Pokemon Released Successfuly\")\r\n    }\r\n    catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n// eventListeners\r\nsubmitBtn.addEventListener(\"click\", getInputtedValue)\r\ncatchBtn.addEventListener(\"click\", catchPokemon)\r\nreleaseBtn.addEventListener(\"click\", releasePokemon)\r\n\r\nclearBtn.addEventListener(\"click\", () => {\r\n    input.value = \"\";\r\n    charName.textContent = \"Name: \";\r\n    charHeight.textContent = \"Height: \" \r\n    charWeight.textContent = \"Weight: \" ;\r\n    charTypes.innerHTML =\"Types: \"\r\n    charImage.src = \"\";                 \r\n})\r\n\r\ncharImage.addEventListener(\"mouseover\", () => {\r\n    charImage.src = backImage;\r\n})\r\n\r\ncharImage.addEventListener(\"mouseout\", () => {\r\n    charImage.src = frontImage;\r\n})\r\n\n\n//# sourceURL=webpack://pokedex/./js/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./js/index.js"]();
/******/ 	
/******/ })()
;